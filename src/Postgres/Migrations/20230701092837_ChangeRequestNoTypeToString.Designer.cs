// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence;

#nullable disable

namespace Postgres.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230701092837_ChangeRequestNoTypeToString")]
    partial class ChangeRequestNoTypeToString
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.RefundFlight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AirLineCode")
                        .HasColumnType("integer");

                    b.Property<int>("BookingType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FlightDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FlightNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("RefundFlight");
                });

            modelBuilder.Entity("Domain.Entities.RefundHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("RefundHistories");
                });

            modelBuilder.Entity("Domain.Entities.RefundPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentMethodCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("RefundAmount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("RefundPayments");
                });

            modelBuilder.Entity("Domain.Entities.RefundRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("BookingAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomerFirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomerLastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("InventoryLegId")
                        .HasColumnType("bigint");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PNR")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Reason")
                        .HasColumnType("integer");

                    b.Property<decimal>("RefundAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("RequestNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RequestNo")
                        .IsUnique();

                    b.ToTable("RefundRequests");
                });

            modelBuilder.Entity("Domain.Entities.RefundFlight", b =>
                {
                    b.HasOne("Domain.Entities.RefundRequest", "RefundRequest")
                        .WithMany("Flights")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RefundRequest");
                });

            modelBuilder.Entity("Domain.Entities.RefundHistory", b =>
                {
                    b.HasOne("Domain.Entities.RefundRequest", "RefundRequest")
                        .WithMany("Histories")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RefundRequest");
                });

            modelBuilder.Entity("Domain.Entities.RefundPayment", b =>
                {
                    b.HasOne("Domain.Entities.RefundRequest", "RefundRequest")
                        .WithMany("Payments")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RefundRequest");
                });

            modelBuilder.Entity("Domain.Entities.RefundRequest", b =>
                {
                    b.Navigation("Flights");

                    b.Navigation("Histories");

                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
